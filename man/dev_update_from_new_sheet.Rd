% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dev_update_from_new_sheet.R
\name{dev_update_from_new_sheet}
\alias{dev_update_from_new_sheet}
\title{Update scheme definitiuon in the scheme definition package in the working directory}
\usage{
dev_update_from_new_sheet(newDmdScheme, updateSchemeVersion = TRUE,
  updatePackageName = FALSE)
}
\arguments{
\item{newDmdScheme}{xlsx spreadsheet containing the new \code{dmdScheme}
definition}

\item{updateSchemeVersion}{if \code{TRUE}, the field \code{dmdSchemeVersion}
in the \code{DESCRIPTION} file is updated.}

\item{updatePackageName}{if \code{TRUE}, the field \code{Package} as well as \code{schemeName} in the
DESCRIPOTIN file is updated. This should be used with caution, as it might
need other changes in the poackage.}
}
\value{
invisibly NULL
}
\description{
\strong{This function is not for the user of a scheme, but for the development process of a new scheme.}
}
\details{
Update the data in the source package in the current working directory with the new scheme definition as specified in the \code{newDmdScheme} spreadsheet.
It will
\itemize{
\item save a new scheme definition, scheme example and scheme raw data files and the xlsx file
\item create a versioned copy of the old \code{.xlsx} file if the version has changed
\item create a backup of the old \code{.xlsx} file with the extension \code{.xlsx.bak} (should be deleted before final packaging)
\item update the example \code{.xml} file
\item update the corresponding files for tests
\item in the \code{DESCRIPTION} file
\itemize{
\item set \code{schemeUpdate} to the current date and time
\item set \code{schemeMD5} to the MD% checksum of the \code{newDmdScheme} file
\item if \code{updateSchemeVersion == TRUE}
\itemize{
\item set \code{schemeVersion} as defined in \code{newDmdScheme}
}
\item if \code{updatePackageName == TRUE}
\itemize{
\item set \code{schemeName} as defined in \code{newDmdScheme}
\item set \code{Package} as defined in \code{newDmdScheme}
}
}
}
}
