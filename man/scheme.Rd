% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scheme_default.R, R/scheme_file.R,
%   R/scheme_install.R, R/scheme_list.R, R/scheme_uninstall.R, R/scheme_use.R
\name{scheme_default}
\alias{scheme_default}
\alias{scheme_file}
\alias{scheme_install}
\alias{scheme_list}
\alias{scheme_uninstall}
\alias{scheme_use}
\title{Functions to manage schemes}
\usage{
scheme_default()

scheme_file(type = "xlsx")

scheme_install(schemeDefinition, overwrite = FALSE)

scheme_list()

scheme_uninstall(name = NULL, version = NULL, delete = FALSE)

scheme_use(name = NULL, version = NULL)
}
\arguments{
\item{type}{extension of the file to be returned}

\item{schemeDefinition}{file containing the definition of the dmdScheme in a format readable by this package}

\item{overwrite}{if \code{TRUE}, the scheme will be overwritten if it exists}

\item{name}{name of the scheme}

\item{version}{version of the scheme}

\item{delete}{if \code{TRUE}, the scheme definitions will be deleted, if
\code{FALSE}, the paths will be returned}
}
\value{
\code{data.frame} with two columns containing name and version of the default scheme

fully qualified path to the file of type of the currently active scheme, if it does not exist, an error is raised.

result of \link{file.copy}

\code{data.frame} with two columns containing name and version of the intalled schemes

if \code{delete = TRUE}, the result from the function
  \link{unlink}, otherwise the fully qualified paths of the files which
  would be deleted.
}
\description{
\bold{\code{scheme_default()}:} Shows the name of the default scheme which comes with the package and can not be deleted.

\bold{\code{scheme_file()}:} Returns path to the \code{xlsx} file of the currently active scheme.

\bold{\code{scheme_install()}:} Installed schemes are copied to \code{system.file("installedSchemes",
package = "dmdScheme")} and , if necessary, an \code{.xlsx} definition is
saved in addition. These can be listed by using \link{scheme_list}.

\bold{\code{scheme_list()}:} Lists all definitions for schemes which are installed. Each follows the
pattern \code{SCHEMENAME_SCHEMEVERSION.EXT}. All files with the same basename
but different extensions represent different representations of the same
scheme definition and are effectively equivalent, only that the tab
Documentation can only be found in the \code{.xls} files.

\bold{\code{scheme_uninstall()}:} Installed schemes are deleted from \code{system.file("installedSchemes",
package = "dmdScheme")}.

\bold{\code{scheme_use()}:} Switch from the current scheme to a new scheme as defined in the scheme
\code{schemeDefinition}. Installed schemes can be listed by using \code{scheme_list()}.
New schemes can be added to the library via a call to \code{scheme_add()}.
The name of the active scheme is saved in \code{dmdScheme_active}
}
\examples{
scheme_default()

scheme_file()
scheme_file("xml")

\dontrun{
scheme_install("path/to/definition.xml")
scheme_install("path/to/definition.xlsx")
}

\dontrun{
scheme_uninstall(name = "schemename", version = "schemeversion")
}

scheme_list()
scheme_use(name = "dmdScheme", version = "0.9.5")

}
