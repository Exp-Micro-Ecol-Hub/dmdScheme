% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_dmdScheme.R,
%   R/as_dmdScheme.dmdSchemeData_raw.R, R/as_dmdScheme.dmdSchemeSet_raw.R,
%   R/as_dmdScheme.xml_document.R, R/make_index.R, R/make_index.dmdSchemeSet.R
\name{as_dmdScheme}
\alias{as_dmdScheme}
\alias{as_dmdScheme.dmdSchemeData_raw}
\alias{as_dmdScheme.dmdSchemeSet_raw}
\alias{as_dmdScheme.xml_document}
\alias{make_index}
\alias{make_index.dmdSchemeSet}
\title{Generic function to convert the data stored in the object \code{x} into a new object of class \code{dmdScheme...}}
\usage{
as_dmdScheme(x, keepData = FALSE, ..., verbose = FALSE)

\method{as_dmdScheme}{dmdSchemeData_raw}(
  x,
  keepData = TRUE,
  convertTypes = TRUE,
  warnToError = TRUE,
  checkVersion = TRUE,
  ...,
  verbose = FALSE
)

\method{as_dmdScheme}{dmdSchemeSet_raw}(
  x,
  keepData = FALSE,
  warnToError = TRUE,
  convertTypes = TRUE,
  checkVersion = TRUE,
  ...,
  verbose = FALSE
)

\method{as_dmdScheme}{xml_document}(x, keepData = TRUE, useSchemeInXml = NULL, ..., verbose = FALSE)

make_index(
  scheme,
  path = ".",
  overwrite = FALSE,
  template = scheme_path_index_template(),
  author = NULL,
  make = c("html", "pdf"),
  pandoc_bin = "pandoc",
  pandoc_args = "-s",
  ...
)

\method{make_index}{dmdSchemeSet}(
  scheme,
  path = ".",
  overwrite = FALSE,
  template = scheme_path_index_template(),
  author = NULL,
  make = c("pdf", "html"),
  pandoc_bin = "pandoc",
  pandoc_args = "-s",
  ...
)
}
\arguments{
\item{x}{object to be converted}

\item{keepData}{if the data should be kept or replaced with one row with NAs}

\item{...}{additional arguments for methods}

\item{verbose}{give verbose progress info. Useful for debugging.}

\item{convertTypes}{if \code{TRUE}, the types specified in the types column
are used for the data type. Otherwise, they are left at type
\code{character}}

\item{warnToError}{if \code{TRUE}, warnings generated during the conversion
will raise an error}

\item{checkVersion}{if \code{TRUE}, a version mismatch between the package
and the data \code{x} will result in an error. If \code{FALSE}, the check
will be skipped.}

\item{useSchemeInXml}{if \code{TRUE}, use scheme definition in xml and raise
an error if the xml does not contain a scheme definition. If False, use the
scheme definition from the corresponding installed package, even if the xml
contains a scheme definition. if \code{NULL} (the default), use the
definition in the xml if it contains a definition, if not use the
corresponding definition from the installed package.}

\item{scheme}{a dmdScheme from which the values for the tokens in the
\code{template} should be taken}

\item{path}{path to where the `index` should be created. The file name of the
created index is identical to the file name of the template.}

\item{overwrite}{if TRUE, the target index file will be overwritten
automatically, unless the target index is equal to the template, in which
case, an error would be raised in all cases.}

\item{template}{template to be used for the index file. For details see the
vignette \bold{Create and Customize the index template}. The default
template is at \code{system.file("index.md", package = "dmdScheme")}}

\item{author}{of the index file}

\item{make}{character vector containing types into which the generated index
file should be converted to. default is html and pdf. \bold{This function
uses \bold{pandoc} for the conversion!.}}

\item{pandoc_bin}{pandoc executable. Needs fully qualified path when not in
\code{$PATH}.}

\item{.pandoc_args}{arguments for calling pandoc}

\item{...additional}{arguments for methods}
}
\value{
dmdScheme as object of class \code{dmdScheme_set}

returns path to the created \code{index.md} file
}
\description{
Generic function to convert the data stored in the object \code{x} into a new object of class \code{dmdScheme...}

Generic function to create the \code{index.md} file to accompany the data
deposit package

Title
}
\examples{
as_dmdScheme(dmdScheme_raw(), keepData = TRUE)
as_dmdScheme(dmdScheme_raw()$Experiment)

xml <- as_xml(dmdScheme_example())
x <- as_dmdScheme(xml)
all.equal(dmdScheme_example(), x)

make_index( dmdScheme_example(), path = tempdir() )

}
